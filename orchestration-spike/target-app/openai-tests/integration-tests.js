/**
 * Integration Test Suite - Multi-Provider Todo Application
 * Generated by OpenAI GPT-3.5 (via Claude Opus Orchestration)
 */

class IntegrationTestSuite {
  constructor() {
    this.frontendUrl = 'http://localhost:3103';
    this.backendUrl = 'http://localhost:3102';
    this.tests = [];
    this.passed = 0;
    this.failed = 0;
    this.results = [];
  }

  test(name, testFn) {
    this.tests.push({ name, testFn });
  }

  async runAll() {
    console.log('🧪 Starting Integration Test Suite');
    console.log('==================================');
    
    this.passed = 0;
    this.failed = 0;
    this.results = [];

    for (const test of this.tests) {
      await this.runTest(test);
    }

    this.printSummary();
    return this.results;
  }

  async runTest(test) {
    const startTime = performance.now();
    
    try {
      await test.testFn();
      const endTime = performance.now();
      const duration = Math.round(endTime - startTime);
      
      console.log(`✅ ${test.name} (${duration}ms)`);
      this.passed++;
      this.results.push({
        name: test.name,
        status: 'passed',
        duration: duration
      });
    } catch (error) {
      const endTime = performance.now();
      const duration = Math.round(endTime - startTime);
      
      console.error(`❌ ${test.name} (${duration}ms)`);
      console.error(`   Error: ${error.message}`);
      this.failed++;
      this.results.push({
        name: test.name,
        status: 'failed',
        duration: duration,
        error: error.message
      });
    }
  }

  printSummary() {
    const total = this.passed + this.failed;
    const passRate = total > 0 ? Math.round((this.passed / total) * 100) : 0;
    
    console.log('\n📊 Integration Test Summary');
    console.log('===========================');
    console.log(`Total Tests: ${total}`);
    console.log(`Passed: ${this.passed}`);
    console.log(`Failed: ${this.failed}`);
    console.log(`Pass Rate: ${passRate}%`);
    
    if (this.failed === 0) {
      console.log('🎉 All integration tests passed!');
    } else {
      console.log(`⚠️ ${this.failed} test(s) failed`);
    }
  }

  async makeRequest(url, options = {}) {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    return {
      status: response.status,
      ok: response.ok,
      data: response.headers.get('content-type')?.includes('json') 
        ? await response.json() 
        : await response.text()
    };
  }

  assert(condition, message) {
    if (!condition) {
      throw new Error(message || 'Assertion failed');
    }
  }

  assertEqual(actual, expected, message) {
    if (actual !== expected) {
      throw new Error(message || `Expected ${expected}, got ${actual}`);
    }
  }
}

// Initialize test suite
const integrationSuite = new IntegrationTestSuite();

// Backend API Tests
integrationSuite.test('Backend Health Check', async () => {
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/health`);
  integrationSuite.assert(response.ok, 'Backend should be healthy');
  integrationSuite.assertEqual(response.data.status, 'healthy', 'Health status should be healthy');
});

integrationSuite.test('Backend Get Todos - Empty State', async () => {
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos`);
  integrationSuite.assert(response.ok, 'Should return successful response');
  integrationSuite.assert(response.data.success, 'Response should indicate success');
  integrationSuite.assert(Array.isArray(response.data.data), 'Should return array of todos');
});

integrationSuite.test('Backend Create Todo', async () => {
  const todoData = { text: 'Integration test todo' };
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos`, {
    method: 'POST',
    body: JSON.stringify(todoData),
    headers: { 'Content-Type': 'application/json' }
  });
  
  integrationSuite.assertEqual(response.status, 201, 'Should return 201 status');
  integrationSuite.assert(response.data.success, 'Response should indicate success');
  integrationSuite.assert(response.data.data.id, 'Todo should have an ID');
  integrationSuite.assertEqual(response.data.data.text, 'Integration test todo', 'Todo text should match');
});

integrationSuite.test('Backend Input Validation', async () => {
  const invalidData = { text: '' };
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos`, {
    method: 'POST',
    body: JSON.stringify(invalidData),
    headers: { 'Content-Type': 'application/json' }
  });
  
  integrationSuite.assertEqual(response.status, 400, 'Should return 400 for invalid input');
  integrationSuite.assert(!response.data.success, 'Response should indicate failure');
  integrationSuite.assert(response.data.error, 'Should provide error message');
});

// Frontend-Backend Integration Tests
integrationSuite.test('CORS Configuration', async () => {
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos`, {
    headers: {
      'Origin': 'http://localhost:3000',
      'Access-Control-Request-Method': 'GET'
    }
  });
  
  integrationSuite.assert(response.ok, 'CORS request should be allowed');
});

// Data Flow Tests
integrationSuite.test('Complete Todo Lifecycle', async () => {
  // Create
  const createResponse = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos`, {
    method: 'POST',
    body: JSON.stringify({ text: 'Lifecycle test todo' }),
    headers: { 'Content-Type': 'application/json' }
  });
  
  integrationSuite.assert(createResponse.data.success, 'Todo creation should succeed');
  const todoId = createResponse.data.data.id;
  
  // Update
  const updateResponse = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos/${todoId}`, {
    method: 'PUT',
    body: JSON.stringify({ completed: true }),
    headers: { 'Content-Type': 'application/json' }
  });
  
  integrationSuite.assert(updateResponse.data.success, 'Todo update should succeed');
  integrationSuite.assertEqual(updateResponse.data.data.completed, true, 'Todo should be completed');
  
  // Delete
  const deleteResponse = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos/${todoId}`, {
    method: 'DELETE'
  });
  
  integrationSuite.assertEqual(deleteResponse.status, 204, 'Todo deletion should return 204');
});

// Error Handling Tests
integrationSuite.test('Backend Error Handling', async () => {
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos/nonexistent-id`, {
    method: 'PUT',
    body: JSON.stringify({ completed: true }),
    headers: { 'Content-Type': 'application/json' }
  });
  
  integrationSuite.assertEqual(response.status, 404, 'Should return 404 for nonexistent todo');
  integrationSuite.assert(!response.data.success, 'Response should indicate failure');
  integrationSuite.assertEqual(response.data.code, 'TODO_NOT_FOUND', 'Should have correct error code');
});

// Performance Tests
integrationSuite.test('API Response Time', async () => {
  const startTime = performance.now();
  const response = await integrationSuite.makeRequest(`${integrationSuite.backendUrl}/api/todos`);
  const endTime = performance.now();
  const responseTime = endTime - startTime;
  
  integrationSuite.assert(response.ok, 'Request should succeed');
  integrationSuite.assert(responseTime < 1000, `Response time should be under 1000ms, got ${responseTime}ms`);
});

// Export for external use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = IntegrationTestSuite;
}

// Auto-run if in browser environment
if (typeof window !== 'undefined') {
  console.log('🧪 Integration Tests - Ready to run');
  console.log('Call integrationSuite.runAll() to execute all tests');
}