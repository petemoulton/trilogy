version: '3.8'

services:
  # Main Trilogy AI System
  trilogy-app:
    build: .
    container_name: trilogy-ai-system
    environment:
      - NODE_ENV=production
      - MEMORY_BACKEND=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=trilogy
      - POSTGRES_USER=trilogy
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_memory:/app/memory
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trilogy-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL for memory and persistent data
  postgres:
    image: postgres:15-alpine
    container_name: trilogy-postgres
    environment:
      POSTGRES_DB: trilogy
      POSTGRES_USER: trilogy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - trilogy-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trilogy -d trilogy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Chrome Extension MCP Server
  mcp-server:
    build:
      context: ./materials/chromeext
      dockerfile: Dockerfile
    container_name: trilogy-mcp
    environment:
      - NODE_ENV=production
      - DATABASE_URL=sqlite:///app/data/mcp.db
    volumes:
      - mcp_data:/app/data
    restart: unless-stopped
    networks:
      - trilogy-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trilogy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - trilogy-app
      - mcp-server
    restart: unless-stopped
    networks:
      - trilogy-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: trilogy-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trilogy-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: trilogy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - trilogy-network

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trilogy-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - trilogy-network

volumes:
  postgres_data:
  app_data:
  app_logs:
  app_memory:
  mcp_data:
  nginx_logs:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trilogy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16